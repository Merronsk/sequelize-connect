{"version":3,"sources":["../../src/Connection.js"],"names":["instance","Connection","database","username","password","options","discover","matcher","logger","models","Sequelize","_connect","then","connection","_log","sequelize","dir","discoverable","Discoverable","each","path","model","name","Promise","Object","keys","modelName","associate","sync","level","message","log","module","exports"],"mappings":"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","file":"Connection.js","sourcesContent":["\"use strict\";\r\n\r\nimport Promise from \"bluebird\";\r\nimport path from \"path\";\r\nimport Sequelize from \"sequelize\";\r\nimport Discoverable  from \"./Discoverable\";\r\n\r\n// Setup Logger\r\n// logger.level  = \"info\";   // Default log level to debug\r\n\r\nlet instance = null;\r\n\r\nclass Connection {\r\n\r\n  constructor(database, username, password, options={}, discover=[\"/model\"], matcher=null, logger=false) {\r\n\r\n    if(instance) return instance;\r\n\r\n    this.database = database;\r\n    this.username = username;\r\n    this.password = password;\r\n    this.options = options;\r\n    this.discover = discover; // Set the default discovery paths to [\"/model\"]\r\n    this.matcher = matcher; // Set the default matcher to null\r\n    this.logger = logger;\r\n\r\n    // Expose db\r\n    this.models = {};\r\n    this.Sequelize = Sequelize; // Expose Sequelize\r\n\r\n    instance = this._connect();\r\n\r\n    return instance\r\n      .then((connection) => {\r\n        return instance = connection;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Connect to the db\r\n   * @return {Object} A database object containing sequelize and models\r\n   */\r\n  _connect(){\r\n\r\n    // return the instance, although this shouldn't be being called externally\r\n    if(instance) return instance;\r\n\r\n    this._log(\"info\", \"Connecting to: \" + this.database + \" as: \" + this.username);\r\n\r\n    // Instantiate a new sequelize instance\r\n    let sequelize = new this.Sequelize(this.database, this.username, this.password, this.options);\r\n    let models = {};\r\n\r\n\r\n    let dir = typeof this.discover === \"string\" ? [this.discover] : this.discover;\r\n    let discoverable = new Discoverable(dir, this.matcher, this.logger);\r\n\r\n    return discoverable.discover()\r\n      .each((path) => {\r\n        // Import each discovered path\r\n        let model  = sequelize[\"import\"](path);\r\n\r\n        if(model) {\r\n          this._log(\"debug\", \"Import for path succeeded: \" + path);\r\n          models[model.name] = model;\r\n        } else {\r\n          this._log(\"debug\", \"Import for path failed: \" + path);\r\n        }\r\n\r\n      })\r\n      .then((path) => {\r\n        // Execute the associate methods for each Model\r\n        this._log(\"info\",\"Import completed\");\r\n\r\n        return Promise.each(Object.keys(models), (modelName) => {\r\n\r\n          if (\"associate\" in models[modelName]) {\r\n            this._log(\"debug\", \"Associating Model: \"+ modelName);\r\n            models[modelName].associate(models);\r\n          } else {\r\n            this._log(\"debug\", \"Nothing to associate for Model: \"+ modelName);\r\n          }\r\n        });\r\n\r\n      })\r\n      .then(() => {\r\n        // Syncronize the DB\r\n        this._log(\"info\", \"Finished connecting to: \" + this.database + \" as: \" + this.username);\r\n        return sequelize.sync();\r\n\r\n      })\r\n      .then(() => {\r\n        this._log(\"info\", \"Finished synchronizing \" + this.database);\r\n        // Expose objects\r\n        this.sequelize = sequelize;\r\n        this.models    = models;\r\n\r\n        return this;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Attempt to log\r\n   * @param  {String} message Message to log\r\n   * @return {null}\r\n   */\r\n  _log(level, message){\r\n    this.logger ? this.logger.log(level, message) : false;\r\n  }\r\n}\r\n\r\nmodule.exports =  Connection;\r\n"]}